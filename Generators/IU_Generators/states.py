from components import *
from UniversalClasses import State

class GeneratedStates:
    def __init__(self):
        self.states_dict = {} #Label: State
        self.directions = ["N", "S", "E", "W"]
        self.dWire = {"N": "ü°π", "S": "ü°ª", "E": "ü°∫", "W": "ü°∏",
                      "NE": "ü°πü°∫", "NW": "ü°πü°∏", "SE": "ü°ªü°∫", "SW": "ü°ªü°∏"}
        self.wss = {"N": "‚Üü", "S": "‚Ü°", "E": "‚Ü†", "W": "‚Üû"}
        self.wireWriterStatesGenerate()


    def states_class1_generate(self):
        print("generated states")

    def wireWriterStatesGenerate(self):
        #Wire Writer States
        for i in range(0, 10):
            for key, value in self.dWire.items():
                l = "wireWriter{}{}".format(key, i)
                dl = "üñã{}{}".format(value, i)
                self.states_dict[l] = State(l, Air_Superiority_Blue, dl)
                l = "wireWriter{}{}Inactive".format(key, i)
                dl = "üñã{}{}‚Å±".format(value, i)
                self.states_dict[l] = State(l, Light_Steel_Blue, dl)

        print("wireWriterStatesGenerated")


### Border
border_state = State("Border", outer_space_crayola, " ", "black")

### Wires
northWire = State("NorthWire", Blue_Sapphire, "ü°π")
southWire = State("SouthWire", Blue_Sapphire, "ü°ª")
westWire = State("WestWire", Blue_Sapphire, "ü°∏")
eastWire = State("EastWire", Blue_Sapphire, "ü°∫")

northEastWire = State("NorthEastWire", Blue_Sapphire, "ü°πü°∫")
northWestWire = State("NorthWestWire", Blue_Sapphire, "ü°πü°∏")
southEastWire = State("SouthEastWire", Blue_Sapphire, "ü°ªü°∫")
southWestWire = State("SouthWestWire", Blue_Sapphire, "ü°ªü°∏")

northProtectedWire = State("NorthProtectedWire", Blue_Sapphire, "|ü°π|")
southProtectedWire = State("SouthProtectedWire", Blue_Sapphire, "|ü°ª|")
eastProtectedWire = State("EastProtectedWire", Blue_Sapphire, "|ü°∫|")
westProtectedWire = State("WestProtectedWire", Blue_Sapphire, "|ü°∏|")
northEastProtectedWire = State("NorthEastProtectedWire", Blue_Sapphire, "|ü°πü°∫|")
northWestProtectedWire = State("NorthWestProtectedWire", Blue_Sapphire, "|ü°πü°∏|")
southEastProtectedWire = State("SouthEastProtectedWire", Blue_Sapphire, "|ü°ªü°∫|")
southWestProtectedWire = State("SouthWestProtectedWire", Blue_Sapphire, "|ü°ªü°∏|")

protectWireWalker = State("ProtectWireWalker", Air_Superiority_Blue, "|üñã|")

northCopyWire = State("NorthCopyWire", light_blue, "‚áà")
southCopyWire = State("SouthCopyWire", light_blue, "‚áä")
westCopyWire = State("WestCopyWire", light_blue, "‚áá")
eastCopyWire = State("EastCopyWire", light_blue, "‚áâ")

#wireWriterSouth_Inactive = State("WireWriterSouth_Inactive5", Air_Superiority_Blue, "5ü°ª‚Å±")
""" wireWriterSouth = State("WireWriterSouth5", Air_Superiority_Blue, "5ü°ª")
wireWriterSouth4 = State("WireWriterSouth4", Air_Superiority_Blue, "4ü°ª")
wireWriterSouth3 = State("WireWriterSouth3", Air_Superiority_Blue, "3ü°ª")
wireWriterSouth2 = State("WireWriterSouth2", Air_Superiority_Blue, "2ü°ª")
wireWriterSouth1 = State("WireWriterSouth1", Air_Superiority_Blue, "1ü°ª")
wireWriterSouth0 = State("WireWriterSouth0", Air_Superiority_Blue, "0ü°ª") """

### Check For Prefixes
check_equality_inactive = State("CheckEqualityInactive", grey_pink, "=", "black")
check_for_any_prefix_inactive = State("CheckForAnyPrefix", grey_pink, "=*‚Çö", "black")
check_for_N_prefix_inactive = State("CheckForNPrefixInactive", grey_pink, "=N‚Çö", "black")
check_for_S_prefix_inactive = State("CheckForSPrefixInactive", grey_pink, "=S‚Çö", "black")
check_for_E_prefix_inactive = State("CheckForEPrefixInactive", grey_pink, "=E‚Çö", "black")
check_for_W_prefix_inactive = State("CheckForWPrefixInactive", grey_pink, "=W‚Çö", "black")
check_for_P_prefix_inactive = State("CheckForProgramPrefixInactive", grey_pink, "=P‚Çö", "black")
check_for_C_prefix_inactive = State("CheckForCustomPrefixInactive", grey_pink, "=C‚Çö", "black")

check_for_any_prefix = State("CheckForAnyPrefix", mid_pink, "=*‚Çö", "black")
check_for_N_prefix = State("CheckForNPrefix", mid_pink, "=N‚Çö", "black")
check_for_S_prefix = State("CheckForSPrefix", mid_pink, "=S‚Çö", "black")
check_for_E_prefix = State("CheckForEPrefix", mid_pink, "=E‚Çö", "black")
check_for_W_prefix = State("CheckForWPrefix", mid_pink, "=W‚Çö", "black")
check_for_P_prefix = State("CheckForProgramPrefix", mid_pink, "=P‚Çö", "black")
check_for_C_prefix = State("CheckForCustomPrefix", mid_pink, "=C‚Çö", "black")

confirm_equal_any_prefix = State("ConfirmEqualAnyPrefix", tea_green, "=*‚Çö", "black")
confirm_equal_N_prefix = State("ConfirmEqualNPrefix", tea_green, "=N‚Çö", "black")
confirm_equal_S_prefix = State("ConfirmEqualSPrefix", tea_green, "=S‚Çö", "black")
confirm_equal_E_prefix = State("ConfirmEqualEPrefix", tea_green, "=E‚Çö", "black")
confirm_equal_W_prefix = State("ConfirmEqualWPrefix", tea_green, "=W‚Çö", "black")
confirm_equal_C_prefix = State("ConfirmEqualCustomPrefix", tea_green, "=C‚Çö", "black")
confirm_equal_P_prefix = State("ConfirmEqualProgramPrefix", tea_green, "=P‚Çö", "black")

### Check For Caps
confirm_for_any_cap = State("ConfirmForAnyCap", tea_green, "=*‚Çç‚Çé", "black")
confirm_for_any_start_cap = State("ConfirmForStartCap", tea_green, "=*·µ¶‚Çç", "black")
confirm_for_any_end_cap = State("ConfirmForEndCap", tea_green, "=*‚Çî‚Çé", "black")
confirm_for_start_state_cap = State("ConfirmForStartStateCap", tea_green, "=(·µ¶", "black")
confirm_for_end_state_cap = State("ConfirmForEndStateCap", tea_green, "=)‚Çî", "black")
confirm_for_end_string_cap = State("ConfirmForEndStringCap", tea_green, "=]‚Çî", "black")
confirm_for_start_string_cap = State("ConfirmForStartStringCap", tea_green, "=[·µ¶", "black")

check_for_any_cap = State("CheckForAnyCap", mid_pink, "=*‚Çç‚Çé", "black")
check_for_any_start_cap = State("CheckForStartCap", mid_pink, "=*·µ¶‚Çç", "black")
check_for_any_end_cap = State("CheckForEndCap", mid_pink, "=*‚Çî‚Çé", "black")
check_for_start_state_cap = State("CheckForStartStateCap", mid_pink, "=(·µ¶", "black")
check_for_end_state_cap = State("CheckForEndStateCap", mid_pink, "=)‚Çî", "black")
check_for_end_string_cap = State("CheckForEndStringCap", mid_pink, "=]‚Çî", "black")
check_for_start_string_cap = State("CheckForStartStringCap", mid_pink, "=[·µ¶", "black")

check_for_any_cap_inactive = State("CheckForAnyCapInactive", grey_pink, "=*‚Çç‚Çé", "black")
check_for_any_start_cap_inactive = State("CheckForStartCapInactive", grey_pink, "=*·µ¶‚Çç", "black")
check_for_any_end_cap_inactive = State("CheckForEndCapInactive", grey_pink, "=*‚Çî‚Çé", "black")
check_for_start_state_cap_inactive = State("CheckForStartStateCapInactive", grey_pink, "=(·µ¶", "black")
check_for_end_state_cap_inactive = State("CheckForEndStateCapInactive", grey_pink, "=)‚Çî", "black")
check_for_start_string_cap_inactive = State("CheckForStartStringCapInactive", grey_pink, "=[·µ¶", "black")
check_for_end_string_cap_inactive = State("CheckForEndStringCapInactive", grey_pink, "=]‚Çî", "black")

### Check For Num Equality
confirm_for_any_num = State("ConfirmForEqualityAnyNum", tea_green, "=*", "black")
confirm_for_equality_zero = State("ConfirmForEqualityZero", tea_green, "=0", "black")
confirm_for_equality_one = State("ConfirmForEqualityOne", tea_green, "=1", "black")
confirm_for_equality_two = State("ConfirmForEqualityTwo", tea_green, "=2", "black")
confirm_for_equality_three = State("ConfirmForEqualityThree", tea_green, "=3", "black")
confirm_for_equality_four = State("ConfirmForEqualityFour", tea_green, "=4", "black")
confirm_for_equality_five = State("ConfirmForEqualityFive", tea_green, "=5", "black")
confirm_for_equality_six = State("ConfirmEqualityForSix", tea_green, "=6", "black")
confirm_for_equality_seven = State("ConfirmForEqualitySeven", tea_green, "=7", "black")
confirm_for_equality_eight = State("ConfirmForEqualityEight", tea_green, "=8", "black")
confirm_for_equality_nine = State("ConfirmForEqualityNine", tea_green, "=9", "black")

check_for_any_num = State("CheckForEqualityAnyNum", mid_pink, "=*", "black")
check_for_equality_zero = State("CheckForEqualityZero", mid_pink, "=0", "black")
check_for_equality_one = State("CheckForEqualityOne", mid_pink, "=1", "black")
check_for_equality_two = State("CheckForEqualityTwo", mid_pink, "=2", "black")
check_for_equality_three = State("CheckForEqualityThree", mid_pink, "=3", "black")
check_for_equality_four = State("CheckForEqualityFour", mid_pink, "=4", "black")
check_for_equality_five = State("CheckForEqualityFive", mid_pink, "=5", "black")
check_for_equality_six = State("CheckEqualityForSix", mid_pink, "=6", "black")
check_for_equality_seven = State("CheckForEqualitySeven", mid_pink, "=7", "black")
check_for_equality_eight = State("CheckForEqualityEight", mid_pink, "=8", "black")
check_for_equality_nine = State("CheckForEqualityNine", mid_pink, "=9", "black")

check_for_any_num_inactive = State("CheckForEqualityAnyNum_Inactive", grey_pink, "=*", "black")
check_for_equality_zero_inactive = State("CheckForEqualityZero_Inactive", grey_pink, "=0", "black")
check_for_equality_one_inactive = State("CheckForEqualityOne_Inactive", grey_pink, "=1", "black")
check_for_equality_two_inactive = State("CheckForEqualityTwo_Inactive", grey_pink, "=2", "black")
check_for_equality_three_inactive = State("CheckForEqualityThree_Inactive", grey_pink, "=3", "black")
check_for_equality_four_inactive = State("CheckForEqualityFour_Inactive", grey_pink, "=4", "black")
check_for_equality_five_inactive = State("CheckForEqualityFive_Inactive", grey_pink, "=5", "black")
check_for_equality_six_inactive = State("CheckEqualityForSix_Inactive", grey_pink, "=6", "black")
check_for_equality_seven_inactive = State("CheckForEqualitySeven_Inactive", grey_pink, "=7", "black")
check_for_equality_eight_inactive = State("CheckForEqualityEight_Inactive", grey_pink, "=8", "black")
check_for_equality_nine_inactive = State("CheckForEqualityNine_Inactive", grey_pink, "=9", "black")

### Trap Doors
trap_door_inactive = State("TrapDoorInactive", Barn_Red, "TD", "black")
trap_door_active = State("TrapDoorActive", Barn_Red, "TD", "black")

### Copy Up
copy_up = State("CopyUp", light_blue, "‚áà", "black")
copy_down = State("CopyDown", light_blue, "‚áä", "black")
copy_left = State("CopyLeft", light_blue, "‚áá", "black")
copy_right = State("CopyRight", light_blue, "‚áâ", "black")

### Data States
ds_1 = State("1", Papaya_Whip, "‚ë†")
ds_2 = State("2", Papaya_Whip, "‚ë°")
ds_3 = State("3", Papaya_Whip, "‚ë¢")
ds_4 = State("4", Papaya_Whip, "‚ë£")
ds_5 = State("5", Papaya_Whip, "‚ë§")
ds_6 = State("6", Papaya_Whip, "‚ë•")
ds_7 = State("7", Papaya_Whip, "‚ë¶")
ds_8 = State("8", Papaya_Whip, "‚ëß")
ds_9 = State("9", Papaya_Whip, "‚ë®")
ds_0 = State("0", Papaya_Whip, "‚ì™")

start_state = State("EndcapDSOpen", Papaya_Whip, "(", "black")
end_state = State("EndcapDSClosed", Papaya_Whip, ")", "black")

start_state_pair = State("StartStatePair", Papaya_Whip, "[", "black")
end_state_pair = State("EndStatePair", Papaya_Whip, "]", "black")

north_prefix = State("NorthPrefix", Papaya_Whip, "ùó°", "black")
south_prefix = State("SouthPrefix", Papaya_Whip, "ùó¶", "black")
east_prefix = State("EastPrefix", Papaya_Whip, "ùóò", "black")
west_prefix = State("WestPrefix", Papaya_Whip, "ùó™", "black")
program_prefix = State("ProgramPrefix", Papaya_Whip, "</>", "black")
reset_prefix = State("ResetPrefix", Papaya_Whip, "‚≠Ø", "black")

### Unicode Arrows
"""
‚Üû : 219E,
‚Üü : 219F,
‚Ü† : 21A0,
‚Ü° : 21A1,
"""

"""
‚Üê : 2190,
‚Üë : 2191,
‚Üí : 2192,
‚Üì : 2193,
‚Üî : 2194,
‚Üï : 2195,
‚Üñ : 2196,
‚Üó : 2197,
‚Üò : 2198,
‚Üô : 2199,
‚Üö : 219A,
‚Üõ : 219B,
‚Üú : 219C,
‚Üù : 219D,
‚Üû : 219E,
‚Üü : 219F,
‚Ü† : 21A0,
‚Ü° : 21A1,
‚Ü¢ : 21A2,
‚Ü£ : 21A3,
‚Ü§ : 21A4,
‚Ü• : 21A5,
‚Ü¶ : 21A6,
‚Üß : 21A7,
‚Ü® : 21A8,
‚Ü© : 21A9,
‚Ü™ : 21AA,
‚Ü´ : 21AB,
‚Ü¨ : 21AC,
‚Ü≠ : 21AD,
‚ÜÆ : 21AE,
‚ÜØ : 21AF,
‚Ü∞ : 21B0,
‚Ü± : 21B1,
‚Ü≤ : 21B2,
‚Ü≥ : 21B3,
‚Ü¥ : 21B4,
‚Üµ : 21B5,
‚Ü∂ : 21B6,
‚Ü∑ : 21B7,
‚Ü∏ : 21B8,
‚Üπ : 21B9,
‚Ü∫ : 21BA,
‚Üª : 21BB,
‚Üº : 21BC,
‚ÜΩ : 21BD,
‚Üæ : 21BE,
‚Üø : 21BF,
‚áÄ : 21C0,
‚áÅ : 21C1,
‚áÇ : 21C2,
‚áÉ : 21C3,
‚áÑ : 21C4,
‚áÖ : 21C5,
‚áÜ : 21C6,
‚áá : 21C7,
‚áà : 21C8,
‚áâ : 21C9,
‚áä : 21CA,
‚áã : 21CB,
‚áå : 21CC,
‚áç : 21CD,
‚áé : 21CE,
‚áè : 21CF,
‚áê : 21D0,
‚áë : 21D1,
‚áí : 21D2,
‚áì : 21D3,
‚áî : 21D4,
‚áï : 21D5,
‚áñ : 21D6,
‚áó : 21D7,
‚áò : 21D8,
‚áô : 21D9,
‚áö : 21DA,
‚áõ : 21DB,
‚áú : 21DC,
‚áù : 21DD,
‚áû : 21DE,
‚áü : 21DF,
‚á† : 21E0,
‚á° : 21E1,
‚á¢ : 21E2,
‚á£ : 21E3,
‚á§ : 21E4,
‚á• : 21E5,
‚á¶ : 21E6,
‚áß : 21E7,
‚á® : 21E8,
‚á© : 21E9,
‚á™ : 21EA,
‚á´ : 21EB,
‚á¨ : 21EC,
‚á≠ : 21ED,
‚áÆ : 21EE,
‚áØ : 21EF,
‚á∞ : 21F0,
‚á± : 21F1,
‚á≤ : 21F2,
‚á≥ : 21F3,
‚á¥ : 21F4,
‚áµ : 21F5,
‚á∂ : 21F6,
‚á∑ : 21F7,
‚á∏ : 21F8,
‚áπ : 21F9,
‚á∫ : 21FA,
‚áª : 21FB,
‚áº : 21FC,
‚áΩ : 21FD,
‚áæ : 21FE,
‚áø : 21FF,   ‚§Ä : 2900,  ‚§Å : 2901,  ‚§Ç : 2902,  ‚§É : 2903,  ‚§Ñ : 2904,  ‚§Ö : 2905,  ‚§Ü : 2906,  ‚§á : 2907,  ‚§à : 2908,  ‚§â : 2909,  ‚§ä : 290A,  ‚§ã : 290B,  ‚§å : 290C,  ‚§ç : 290D,  ‚§é : 290E,  ‚§è : 290F,  ‚§ê : 2910,  ‚§ë : 2911,  ‚§í : 2912,  ‚§ì : 2913,  ‚§î : 2914,  ‚§ï : 2915,  ‚§ñ : 2916,  ‚§ó : 2917,  ‚§ò : 2918,  ‚§ô : 2919,  ‚§ö : 291A,  ‚§õ : 291B,  ‚§ú : 291C,  ‚§ù : 291D,  ‚§û : 291E,  ‚§ü : 291F,  ‚§† : 2920,  ‚§° : 2921,  ‚§¢ : 2922,  ‚§£ : 2923,  ‚§§ : 2924,  ‚§• : 2925,  ‚§¶ : 2926,  ‚§ß : 2927,  ‚§® : 2928,  ‚§© : 2929,  ‚§™ : 292A,  ‚§´ : 292B,  ‚§¨ : 292C,  ‚§≠ : 292D,  ‚§Æ : 292E,  ‚§Ø : 292F,  ‚§∞ : 2930,  ‚§± : 2931,  ‚§≤ : 2932,  ‚§≥ : 2933,  ‚§¥ : 2934,  ‚§µ : 2935,  ‚§∂ : 2936,  ‚§∑ : 2937,  ‚§∏ : 2938,  ‚§π : 2939,  ‚§∫ : 293A,  ‚§ª : 293B,  ‚§º : 293C,  ‚§Ω : 293D,  ‚§æ : 293E,  ‚§ø : 293F,  ‚•Ä : 2940,  ‚•Å : 2941,  ‚•Ç : 2942,  ‚•É : 2943,  ‚•Ñ : 2944,  ‚•Ö : 2945,  ‚•Ü : 2946,  ‚•á : 2947,  ‚•à : 2948,  ‚•â : 2949,  ‚•ä : 294A,  ‚•ã : 294B,  ‚•å : 294C,  ‚•ç : 294D,  ‚•é : 294E,  ‚•è : 294F,  ‚•ê : 2950,  ‚•ë : 2951,  ‚•í : 2952,  ‚•ì : 2953,  ‚•î : 2954,  ‚•ï : 2955,  ‚•ñ : 2956,  ‚•ó : 2957,  ‚•ò : 2958,  ‚•ô : 2959,  ‚•ö : 295A,  ‚•õ : 295B,  ‚•ú : 295C,  ‚•ù : 295D,  ‚•û : 295E,  ‚•ü : 295F,  ‚•† : 2960,  ‚•° : 2961,  ‚•¢ : 2962,  ‚•£ : 2963,  ‚•§ : 2964,  ‚•• : 2965,  ‚•¶ : 2966,  ‚•ß : 2967,  ‚•® : 2968,  ‚•© : 2969,  ‚•™ : 296A,  ‚•´ : 296B,  ‚•¨ : 296C,  ‚•≠ : 296D,  ‚•Æ : 296E,  ‚•Ø : 296F,  ‚•∞ : 2970,  ‚•± : 2971,  ‚•≤ : 2972,  ‚•≥ : 2973,  ‚•¥ : 2974,  ‚•µ : 2975,  ‚•∂ : 2976,  ‚•∑ : 2977,  ‚•∏ : 2978,  ‚•π : 2979,  ‚•∫ : 297A,  ‚•ª : 297B,  ‚•º : 297C,  ‚•Ω : 297D,  ‚•æ : 297E,  ‚•ø : 297F,

"""
"""
    ‚¶Ä : 2980,  ‚¶Å : 2981,  ‚¶Ç : 2982,  ‚¶É : 2983,  ‚¶Ñ : 2984,  ‚¶Ö : 2985,  ‚¶Ü : 2986,  ‚¶á : 2987,  ‚¶à : 2988,  ‚¶â : 2989,  ‚¶ä : 298A,  ‚¶ã : 298B,  ‚¶å : 298C,  ‚¶ç : 298D,  ‚¶é : 298E,  ‚¶è : 298F,  ‚¶ê : 2990,  ‚¶ë : 2991,  ‚¶í : 2992,  ‚¶ì : 2993,  ‚¶î : 2994,  ‚¶ï : 2995,  ‚¶ñ : 2996,  ‚¶ó : 2997,  ‚¶ò : 2998,  ‚¶ô : 2999,  ‚¶ö : 299A,  ‚¶õ : 299B,  ‚¶ú : 299C,  ‚¶ù : 299D,  ‚¶û : 299E,  ‚¶ü : 299F,  ‚¶† : 29A0,  ‚¶° : 29A1,  ‚¶¢ : 29A2,  ‚¶£ : 29A3,  ‚¶§ : 29A4,  ‚¶• : 29A5,  ‚¶¶ : 29A6,  ‚¶ß : 29A7,  ‚¶® : 29A8,  ‚¶© : 29A9,  ‚¶™ : 29AA,  ‚¶´ : 29AB,  ‚¶¨ : 29AC,  ‚¶≠ : 29AD,  ‚¶Æ : 29AE,  ‚¶Ø : 29AF,  ‚¶∞ : 29B0,  ‚¶± : 29B1,  ‚¶≤ : 29B2,  ‚¶≥ : 29B3,  ‚¶¥ : 29B4,  ‚¶µ : 29B5,  ‚¶∂ : 29B6,  ‚¶∑ : 29B7,  ‚¶∏ : 29B8,  ‚¶π : 29B9,  ‚¶∫ : 29BA,  ‚¶ª : 29BB,  ‚¶º : 29BC,  ‚¶Ω : 29BD,  ‚¶æ : 29BE,  ‚¶ø : 29BF,  ‚ßÄ : 29C0,  ‚ßÅ : 29C1,  ‚ßÇ : 29C2,  ‚ßÉ : 29C3,  ‚ßÑ : 29C4,  ‚ßÖ : 29C5,  ‚ßÜ : 29C6,  ‚ßá : 29C7,  ‚ßà : 29C8,  ‚ßâ : 29C9,  ‚ßä : 29CA,  ‚ßã : 29CB,  ‚ßå : 29CC,  ‚ßç : 29CD,  ‚ßé : 29CE,  ‚ßè : 29CF,  ‚ßê : 29D0,  ‚ßë : 29D1,  ‚ßí : 29D2,  ‚ßì : 29D3,  ‚ßî : 29D4,  ‚ßï : 29D5,  ‚ßñ : 29D6,  ‚ßó : 29D7,  ‚ßò : 29D8,  ‚ßô : 29D9,  ‚ßö : 29DA,  ‚ßõ : 29DB,  ‚ßú : 29DC,  ‚ßù : 29DD,  ‚ßû : 29DE,  ‚ßü : 29DF,  ‚ß† : 29E0,  ‚ß° : 29E1,  ‚ß¢ : 29E2,  ‚ß£ : 29E3,  ‚ß§ : 29E4,  ‚ß• : 29E5,  ‚ß¶ : 29E6,  ‚ßß : 29E7,  ‚ß® : 29E8,  ‚ß© : 29E9,  ‚ß™ : 29EA,  ‚ß´ : 29EB,  ‚ß¨ : 29EC,  ‚ß≠ : 29ED,  ‚ßÆ : 29EE,  ‚ßØ : 29EF,  ‚ß∞ : 29F0,  ‚ß± : 29F1,  ‚ß≤ : 29F2,  ‚ß≥ : 29F3,  ‚ß¥ : 29F4,  ‚ßµ : 29F5,  ‚ß∂ : 29F6,  ‚ß∑ : 29F7,  ‚ß∏ : 29F8,  ‚ßπ : 29F9,  ‚ß∫ : 29FA,  ‚ßª : 29FB,  ‚ßº : 29FC,  ‚ßΩ : 29FD,  ‚ßæ : 29FE,  ‚ßø : 29FF,
"""

"""
ü†Ä : 1F800,  ü†Å : 1F801,  ü†Ç : 1F802,  ü†É : 1F803,  ü†Ñ : 1F804,  ü†Ö : 1F805,  ü†Ü : 1F806,  ü†á : 1F807,  ü†à : 1F808,  ü†â : 1F809,  ü†ä : 1F80A,  ü†ã : 1F80B,  ü†å : 1F80C,  ü†ç : 1F80D,  ü†é : 1F80E,  ü†è : 1F80F,  ü†ê : 1F810,  ü†ë : 1F811,  ü†í : 1F812,  ü†ì : 1F813,  ü†î : 1F814,  ü†ï : 1F815,  ü†ñ : 1F816,  ü†ó : 1F817,  ü†ò : 1F818,  ü†ô : 1F819,  ü†ö : 1F81A,  ü†õ : 1F81B,  ü†ú : 1F81C,  ü†ù : 1F81D,  ü†û : 1F81E,  ü†ü : 1F81F,  ü†† : 1F820,  ü†° : 1F821,  ü†¢ : 1F822,  ü†£ : 1F823,  ü†§ : 1F824,  ü†• : 1F825,  ü†¶ :
1F826,  ü†ß : 1F827,  ü†® : 1F828,  ü†© : 1F829,  ü†™ : 1F82A,  ü†´ : 1F82B,  ü†¨ : 1F82C,  ü†≠ : 1F82D,  ü†Æ : 1F82E,  ü†Ø : 1F82F,  ü†∞ : 1F830,  ü†± : 1F831,  ü†≤ : 1F832,  ü†≥ : 1F833,  ü†¥ : 1F834,  ü†µ : 1F835,  ü†∂ : 1F836,  ü†∑ : 1F837,  ü†∏ : 1F838,  ü†π : 1F839,  ü†∫ : 1F83A,  ü†ª : 1F83B,  ü†º : 1F83C,  ü†Ω : 1F83D,  ü†æ : 1F83E,  ü†ø : 1F83F,  ü°Ä : 1F840,  ü°Å : 1F841,  ü°Ç : 1F842,  ü°É : 1F843,  ü°Ñ : 1F844,  ü°Ö : 1F845,  ü°Ü : 1F846,  ü°á : 1F847,  ü°à : 1F848,  ü°â : 1F849,  ü°ä : 1F84A,  ü°ã : 1F84B,  ü°å : 1F84C,
ü°ç : 1F84D,  ü°é : 1F84E,  ü°è : 1F84F,  ü°ê : 1F850,  ü°ë : 1F851,  ü°í : 1F852,  ü°ì : 1F853,  ü°î : 1F854,  ü°ï : 1F855,  ü°ñ : 1F856,  ü°ó : 1F857,  ü°ò : 1F858,  ü°ô : 1F859,  ü°ö : 1F85A,  ü°õ : 1F85B,  ü°ú : 1F85C,  ü°ù : 1F85D,  ü°û : 1F85E,  ü°ü : 1F85F,  ü°† : 1F860,  ü°° : 1F861,  ü°¢ : 1F862,  ü°£ : 1F863,  ü°§ : 1F864,  ü°• : 1F865,  ü°¶ : 1F866,  ü°ß : 1F867,  ü°® : 1F868,  ü°© : 1F869,  ü°™ : 1F86A,  ü°´ : 1F86B,  ü°¨ : 1F86C,  ü°≠ : 1F86D,  ü°Æ : 1F86E,  ü°Ø : 1F86F,  ü°∞ : 1F870,  ü°± : 1F871,  ü°≤ : 1F872,  ü°≥ :
1F873,  ü°¥ : 1F874,  ü°µ : 1F875,  ü°∂ : 1F876,  ü°∑ : 1F877,  ü°∏ : 1F878,  ü°π : 1F879,  ü°∫ : 1F87A,  ü°ª : 1F87B,  ü°º : 1F87C,  ü°Ω : 1F87D,  ü°æ : 1F87E,  ü°ø : 1F87F,  ü¢Ä : 1F880,  ü¢Å : 1F881,  ü¢Ç : 1F882,  ü¢É : 1F883,  ü¢Ñ : 1F884,  ü¢Ö : 1F885,  ü¢Ü : 1F886,  ü¢á : 1F887,    ü¢ê : 1F890,  ü¢ë : 1F891,  ü¢í : 1F892,  ü¢ì : 1F893,  ü¢î : 1F894,  ü¢ï : 1F895,  ü¢ñ : 1F896,  ü¢ó : 1F897,  ü¢ò : 1F898,  ü¢ô : 1F899,  ü¢ö : 1F89A,  ü¢õ : 1F89B,  ü¢ú : 1F89C,  ü¢ù : 1F89D,  ü¢û : 1F89E,  ü¢ü : 1F89F,  ü¢† : 1F8A0,  ü¢° :
1F8A1,  ü¢¢ : 1F8A2,  ü¢£ : 1F8A3,  ü¢§ : 1F8A4,  ü¢• : 1F8A5,  ü¢¶ : 1F8A6,  ü¢ß : 1F8A7,  ü¢® : 1F8A8,  ü¢© : 1F8A9,  ü¢™ : 1F8AA,  ü¢´ : 1F8AB,  ü¢¨ : 1F8AC,  ü¢≠ : 1F8AD,

 """

"""

"""
### Curving Arrows ‚§∂
